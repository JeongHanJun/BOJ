재귀를 사용해 푸는 하노이탑 유명한 문제
원판의 갯수를 입력받으면 움직인 횟수와 그 과정을 출력하는 문제
타워가 3개가 있다.

1   2   3

1을 시작으로 잡고 3을 도착 지점으로 잡으면,
1 - > 3
1 - > 2
3 - > 2 ( 아래의 원판이 더 커야하므로)
2 - > 1 
2 - > 3
1 - > 3
이런 식으로 진행되는데
N개의 원판을 움직일때
시작점(source) - > 중간지점(middle) 로 n-1개를 옮기고       ( 복잡도 T(n-1) )
여기서 가장 큰 원판을 시작점(src) - > 도착지점(destination) ( 복잡도 1)
다시 중간지점(mid)의 원판들을 도작(dest)지점으로            ( 복잡도 T(n-1) )

코딩적으로 보자면 이중 두번째 제외한 단계가 하노이탑을 해결하는 과정이다.
이를 재귀적으로 표현해보면,

            hanoi(k-1, src, dest, mid);
            hanoi(k-1, mid, src, dest);

이 구조의 반복이다. 
그리고 원판이 딱 1개 남으면 src -> dest

수학적으로 접근해보면 
T(n) = 2 * T(n-1) + 1
=> T(n) + 1 = 2 * ( T(n-1) + 1)
T(n-1) = a(n) 이라고 하면 => a(n+1) = 2 * a(n) 이므로 이것은 초항이 1이고 공비가 2인 등비수열
a(n) = T(n) + 1 = 2^n + 1 이므로 T(n) = 2^n - 1 이라는 시간적 복잡도가 나온다.
