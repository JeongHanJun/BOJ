import java.util.*;
import java.io.*;
class Coord {		// 좌표 = Coordinate
    int x;
    int y;
    int cnt;		// 시작점 - 끝점 거리

    Coord(int x, int y, int cnt){
        this.x = x;
        this.y = y;
        this.cnt = cnt;
    }
}
class Main{    
    static int n,m, cnt = 0;
    static char board[][];
    static boolean[][] check;

    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine()," ");
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        board = new char[n][m];
        String str;
        for( int i = 0 ; i < n ; i++)
        {
        	str = br.readLine();
            for( int j = 0 ; j < m ; j++)
            {
                board[i][j] = str.charAt(j);
            }
        }
        check = new boolean[n][m];
        check[0][0] = true;
        int x = 0;
        int y = 0;
        Queue<Coord> q = new LinkedList<>();
        int[] dirx = {0, 0, 1, -1};	// 동 서 남 북
        int[] diry = {1, -1, 0, 0};
        q.offer(new Coord(x,y, 1));
        check[x][y] = true;
        while( !q.isEmpty() )
        {
            Coord pos = q.poll();
            int a = pos.x;
            int b = pos.y;
            int cnt = pos.cnt;
            if(a == n-1 && b == m-1)	// bfs 함수의 종료 조건
            {
                System.out.println(cnt);
                break;
            }
            for( int i = 0 ; i < 4 ; i++)
            {
                int nextx = a + dirx[i];	// 기존 좌표 + 동/서/남/북
                int nexty = b + diry[i];
                if((nextx >= 0 && nextx < n && nexty >= 0 && nexty < m && board[nextx][nexty] != '0' && !check[nextx][nexty]))
                {
                    q.offer(new Coord(nextx,nexty, cnt+1));
                    check[nextx][nexty] = true;
                }
            }
        }
        return;
    }
}